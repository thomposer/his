<?php

namespace app\modules\spot\models;

use Yii;
use yii\db\Query;

/**
 * This is the model class for table "{{%child_care_template}}".
 *
 * @property string $id
 * @property string $spot_id
 * @property string $operating_id
 * @property string $name
 * @property integer $type
 * @property string $content
 * @property string $create_time
 * @property string $update_time
 */
class ChildCareTemplate extends \app\common\base\BaseActiveRecord  
{

    public $user_name;
    public $saveType;

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub

        $this->spot_id = $this->parentSpotId;
    }

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return '{{%child_care_template}}';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            [['spot_id', 'type', 'name'], 'required'],
            [['spot_id', 'operating_id', 'type', 'create_time', 'update_time'], 'integer'],
            [['content'], 'string', 'max' => 1000],
            [['name'], 'string', 'max' => 64],
            [['name'],'validateName'],
            [['name'],'trim']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => 'ID',
            'spot_id' => '机构ID',
            'operating_id' => '操作人ID',
            'name' => '模板名称',
            'type' => '模板类型',
            'content' => '指导意见',
            'user_name' => '创建人',
            'create_time' => '创建时间',
            'update_time' => 'Update Time',
        ];
    }

    public static $getType = [
        1 => '通用',
        2 => '个人'
    ];

    public static function templateList() {
        $userId = Yii::$app->user->identity->id;
        $data = self::find()->select(['id', 'operating_id', 'name', 'content'])->where('(type=1 OR (type=2 AND operating_id=:userId)) AND spot_id=:spotId', [':userId' => $userId, ':spotId' => self::$staticParentSpotId])->indexBy('id')->asArray()->all();
        return $data;
    }


    public function validateName($attribute,$params){
        
        if(!$this->hasErrors()){
            if($this->isNewRecord){
                $hasRecord = $this->type == 2 ? $this->checkDuplicate() : $this->checkCommonName();
                if($hasRecord){
                    $this->addError('name',   '该模板名称已存在');
                }
            }else{
                $oldTemplateName = $this->getOldAttribute('name');
                if (trim($oldTemplateName) != trim($this->name)) {
                    $hasRecord = $this->type == 2 ? $this->checkDuplicate() : $this->checkCommonName();
                    if ($hasRecord) {
                        $this->addError('name',   '该模板名称已存在');
                    }
                }
            }
        }
    }
    
    protected function checkCommonName(){
        $hasRecord = self::find()->where(['spot_id' => $this->spot_id, 'name' => trim($this->name)])->count(1);
        if ($hasRecord) {
            return true;
        } else {
            return false;
        }
    }

    protected function checkDuplicate() {
        $query = new Query();
        $query->from(self::tableName());
        $query->orFilterWhere(['spot_id' => $this->spot_id,'type' => 1,'name' => trim($this->name)]);
        $query->orFilterWhere(['spot_id' => $this->spot_id,'operating_id' => $this->userInfo->id    ,'name' => trim($this->name)]);
        $hasRecord = $query->count(1);
        if ($hasRecord) {
            return true;
        } else {
            return false;
        }
    }
    
    public function beforeSave($insert){
        if ($this->isNewRecord) {
            $this->operating_id = $this->userInfo->id;
        }
        return parent::beforeSave($insert);
    }

}
