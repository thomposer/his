<?php

namespace app\modules\spot\models;

use Yii;
use yii\db\Query;


/**
 * This is the model class for table "{{%case_template}}".
 *
 * @property string $id
 * @property string $spot_id
 * @property string $user_id
 * @property string $name
 * @property integer $type
 * @property string $chiefcomplaint
 * @property string $historypresent
 * @property string $pasthistory
 * @property string $personalhistory
 * @property string $genetichistory
 * @property string $physical_examination
 * @property string $cure_idea
 * @property string $create_time
 * @property string $update_time
 */
class CaseTemplate extends \app\common\base\BaseActiveRecord
{
        public $user_name;
        public $saveType;
        public $caseId;


    public  function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->spot_id=$this->parentSpotId;


    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%case_template}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['spot_id','name','type','saveType'], 'required'],
            [['spot_id', 'user_id', 'type', 'create_time', 'update_time','caseId','saveType'], 'integer'],
            [['name'], 'string', 'max' => 64],
            [['name'], 'validateName'],
            [['name'] ,'trim'],
            [['followup','chiefcomplaint','cure_idea'],'string','max' => 255],
            [[ 'historypresent', 'pasthistory', 'personalhistory', 'genetichistory', 'physical_examination','pastdraghistory'], 'string', 'max' => 1000],
            [['name'],'trim']
            
        ];
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => '自增id',
            'spot_id' => '机构id',
            'user_id' => '用户id',
            'name' => '模板名称',
            'type' => '模板类型',
            'chiefcomplaint' => '主诉',
            'historypresent' => '现病史',
            'pasthistory' => '既往病史',
            'personalhistory' => '个人史',
            'genetichistory' => '家族史',
            'physical_examination' => '体格检查',
            'cure_idea' => '治疗意见',
            'pastdraghistory' => '过去用药史',
            'followup' => '随诊',
            'create_time' => '创建时间',
            'update_time' => '更新时间',
            'user_name' => '创建人',
            'saveType' => '保存方式',
        ];
    }

    public static $getType = [
        1 => '通用',
        2 => '个人',
    ];

    public static $getSaveType=[
        1 => '覆盖原模板',
        2 => '存为新模板',
    ];

    public function validateName($attribute,$params){
        
        if(!$this->hasErrors()){
            if($this->isNewRecord){
                $hasRecord = $this->type == 2 ? $this->checkDuplicate() : $this->checkCommonName();
                if($hasRecord){
                    $this->addError('name',   '该模板名称已存在');
                }
            }else{
                $oldTemplateName = $this->getOldAttribute('name');
                if (trim($oldTemplateName) != trim($this->name)) {
                    $hasRecord = $this->type == 2 ? $this->checkDuplicate() : $this->checkCommonName();
                    if ($hasRecord) {
                        $this->addError('name',   '该模板名称已存在');
                    }
                }
            }
        }
    }
    
    protected function checkCommonName(){
        $hasRecord = self::find()->where(['spot_id' => $this->spot_id, 'name' => trim($this->name)])->count(1);
        if ($hasRecord) {
            return true;
        } else {
            return false;
        }
    }
    
    protected function checkDuplicate() {
        $query = new Query();
        $query->from(self::tableName());
        $query->orFilterWhere(['spot_id' => $this->spot_id,'type' => 1,'name' => trim($this->name)]);
        $query->orFilterWhere(['spot_id' => $this->spot_id,'user_id' => $this->userInfo->id,'name' => trim($this->name)]);
        $hasRecord = $query->count(1);
        if ($hasRecord) {
            return true;
        } else {
            return false;
        }
    }
    public function beforeSave($insert){
        if ($this->isNewRecord) {
            $this->user_id = $this->userInfo->id;
        }
        return parent::beforeSave($insert);
    }

}
